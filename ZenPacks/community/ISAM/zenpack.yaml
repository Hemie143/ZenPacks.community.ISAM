name: ZenPacks.community.ISAM

zProperties:
  zISAMUsername:
    category: ISAM

  zISAMPassword:
    category: ISAM
    type: password

class_relationships:
  - ISAMDevice 1:MC ISAMReverseProxy
  - ISAMDevice 1:MC ISAMInterface
  - ISAMDevice 1:MC ISAMFileSystem
  - ISAMReverseProxy 1:MC ISAMJunction
  - ISAMJunction 1:MC ISAMJunctionServer

classes:
  ISAMDevice:
    base: [zenpacklib.Device]
    label: ISAM Device
    properties:
      model:
        type: string
        label: Model

  ISAMReverseProxy:
    base: [zenpacklib.Component]
    label: ISAM Reverse Proxy
    properties:
      status:
        type: string
        label: Status
      started:
        type: string
        label: Started
      enabled:
        type: string
        label: Enabled

  ISAMJunction:
    base: [zenpacklib.Component]
    label: ISAM Junction

  ISAMJunctionServer:
    base: [zenpacklib.Component]
    label: ISAM Junctioned Server
    monitoring_templates: [ISAMJunctionServer]

  ISAMInterface:
    base: [zenpacklib.Component]
    label: ISAM Interface
    properties:
      enabled:
        type: string
        label: Enabled
      ipv4:
        type: string
        label: IPv4 address

  ISAMFileSystem:
    base: [zenpacklib.Component]
    label: File System
    monitoring_templates: [ISAMFileSystem]
    properties:
      size:
        label: Size
        renderer: Zenoss.render.bytesString

event_classes:
  /Status/ISAM:
    remove: false

  /Status/ISAM/ISAMReverseProxy:
    remove: true
    transform: "if int(float(evt.current)) == 0:\n    msg = 'Reverse Proxy {}: OK'.format(evt.component)\n\
      if int(float(evt.current)) == 1:\n    msg = 'Reverse Proxy {}: failure with\
      \ a Junction'.format(evt.component)\nelif int(float(evt.current)) == 2:\n  \
      \  msg = 'Reverse Proxy {}: Reverse Proxy failure'.format(evt.component)\n\n\
      evt.message = msg\nevt.summary = msg"
  /Status/ISAM/ISAMJunction:
    remove: true
    transform: "if int(float(evt.current)) == 0:\n    msg = 'Junction {}: OK'.format(evt.component)\n\
      if int(float(evt.current)) == 1:\n    msg = 'Junction {}: failure '.format(evt.component)\n\
      elif int(float(evt.current)) == 2:\n    msg = 'Junction {}: major failure'.format(evt.component)\n\
      \nevt.message = msg\nevt.summary = msg"
  /Status/ISAM/ISAMJunctionServer:
    remove: true
    transform: "if int(float(evt.current)) == 0:\n    msg = 'Junctioned Server {}:\
      \ OK'.format(evt.component)\nif int(float(evt.current)) == 1:\n    msg = 'Junctioned\
      \ Server {}: failure '.format(evt.component)\nelif int(float(evt.current)) ==\
      \ 2:\n    msg = 'Junctioned Server {}: major failure'.format(evt.component)\n\
      \nevt.message = msg\nevt.summary = msg"
  /Status/ISAM/LogData:
    remove: false
    mappings:
      iss.0.2:
        eventClassKey: iss.0.2
        sequence: 1001
        example: snmp trap iss.0.2

  /Status/ISAMReverseProxy:
    remove: true
    transform: |+
      # Count events and adapt severity according to counts ################################

      # Count identical events ###################################################
      # Initialize existing_count.
      existing_count = 0
      # Prefix for fingerprint (dedupid).
      dedupfields = [evt.device, evt.component, evt.eventClass]
      if getattr(evt, 'eventKey', False):
          dedupfields += [evt.eventKey, evt.severity]      # Should always be this one
      else:
          dedupfields += [evt.severity, evt.summary]

      zep = getFacade('zep')
      # Filter for New and Ack'd event with same fingerprint
      evt_filter = zep.createEventFilter(status=(0,1), fingerprint='|'.join(map(str, dedupfields)))
      summaries = zep.getEventSummaries(0, 1, filter=evt_filter)
      if summaries['total']:
          existing_count = list(summaries['events'])[0]['count']

      # Look for child events ####################################################
      # Filter for New and Ack'd event with severity higher or equal to warn, same device and same Reverse Proxy
      evt_filter = zep.createEventFilter(status=(0,1), severity=(3,4,5), element_identifier=(evt.device), details={'isamRP': evt.isamRP})  # Adapt for other classes
      summaries = zep.getEventSummaries(0, 10, filter=evt_filter)
      for e in summaries['events']:
          if e['occurrence'][0]['event_class'].startswith('/Status/ISAMJunction'):
              # If child event found, set current event severity to Info
              evt.severity = 2
              break
      else:
          # No child event found
          if existing_count < 4:      # Must be higher than for Junction
              # Delay the alert, keep it to Info
              evt.severity = 2
          else:
              # Waited for delay, set it to measured severity
              evt.severity = evt.measured_severity

  /Status/ISAMJunction:
    remove: true
    transform: |+
      # Count events and adapt severity according to counts ################################

      # Count identical events ###################################################
      # Initialize existing_count.
      existing_count = 0
      # Prefix for fingerprint (dedupid).
      dedupfields = [evt.device, evt.component, evt.eventClass]
      if getattr(evt, 'eventKey', False):
          dedupfields += [evt.eventKey, evt.severity]      # Should always be this one
      else:
          dedupfields += [evt.severity, evt.summary]

      zep = getFacade('zep')
      # Filter for New and Ack'd event with same fingerprint
      evt_filter = zep.createEventFilter(status=(0,1), fingerprint='|'.join(map(str, dedupfields)))
      summaries = zep.getEventSummaries(0, 1, filter=evt_filter)
      if summaries['total']:
          existing_count = list(summaries['events'])[0]['count']

      # Look for child events ####################################################
      # Filter for New and Ack'd event with severity higher or equal to warn, same device, same Reverse Proxy and same Junction
      evt_filter = zep.createEventFilter(status=(0,1), severity=(3,4,5), element_identifier=(evt.device), details={'isamRP': evt.isamRP, 'isamJ': evt.isamJ})  # Adapt for other classes
      summaries = zep.getEventSummaries(0, 10, filter=evt_filter)
      for e in summaries['events']:
          if e['occurrence'][0]['event_class'].startswith('/Status/ISAMJunction'):
              # If child event found, set current event severity to Info
              evt.severity = 2
              break
      else:
          # No child event found
          if existing_count < 3:      # Must be higher than for Junction
              # Delay the alert, keep it to Info
              evt.severity = 2
          else:
              # Waited for delay, set it to measured severity
              evt.severity = evt.measured_severity

  /Status/ISAMJunctionServer:
    remove: true
    transform: |+
      # Count events and adapt severity according to counts ################################
      # Count identical events ###################################################
      # Initialize existing_count.
      existing_count = 0
      # Prefix for fingerprint (dedupid).
      dedupfields = [evt.device, evt.component, evt.eventClass]
      if getattr(evt, 'eventKey',False):
          dedupfields += [evt.eventKey, evt.severity]      # Should always be this one
      else:
          dedupfields += [evt.severity, evt.summary]

      zep = getFacade('zep')
      # Filter for New and Ack'd event with same fingerprint
      evt_filter = zep.createEventFilter(status=(0,1), fingerprint='|'.join(map(str,dedupfields)))
      summaries = zep.getEventSummaries(0, 1, filter=evt_filter)
      if summaries['total']:
          existing_count = list(summaries['events'])[0]['count']

      # No child event here #####################################################
      if existing_count < 2:
          # Delay the alert, keep it to Info
          evt.severity = 2
      else:
          # Waited for delay, set it to measured severity
          evt.severity = evt.measured_severity

device_classes:
  /Security/ISAM:
    zProperties:
      zPythonClass: ZenPacks.community.ISAM.ISAMDevice
      zSnmpMonitorIgnore: true
      zCollectorPlugins:
        - community.json.ISAM
      zDeviceTemplates:
        - Device
        - ISAMDevice

    templates:
      ISAMDevice:
        targetPythonClass: ZenPacks.community.ISAM.ISAMDevice

        datasources:
          cpu:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMDevice.ISAMDevice

            datapoints:
              user_cpu: GAUGE
              system_cpu: GAUGE
              idle_cpu: GAUGE
              total_cpu: GAUGE

          memory:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMDevice.ISAMDevice

            datapoints:
              used: GAUGE
              free: GAUGE
              total: GAUGE
              used_perc: GAUGE
        thresholds:
          Memory Usage:
            dsnames: [memory_used_perc]
            eventClass: /Perf/Memory
            severity: 4
            maxval: '85'
            type: DurationThreshold
            timePeriod: 15 minutes
          CPU Usage:
            dsnames: [cpu_total_cpu]
            eventClass: /Perf/CPU
            severity: 4
            maxval: '90'
            type: DurationThreshold
            timePeriod: 15 minutes
        graphs:
          CPU:
            units: percent
            width: 1000
            miny: 0
            maxy: 100

            graphpoints:
              User CPU percentage:
                dpName: cpu_user_cpu
                lineType: AREA
              System CPU percentage:
                dpName: cpu_system_cpu
                lineType: AREA
                stacked: true
              Idle CPU percentage:
                dpName: cpu_idle_cpu
                lineType: AREA
                stacked: true

          Total CPU:
            units: percent
            width: 1000
            miny: 0
            maxy: 100

            graphpoints:
              Total CPU percentage:
                dpName: cpu_total_cpu
                lineType: AREA

          Memory:
            units: bytes
            width: 1000
            miny: 0
            base: true

            graphpoints:
              Memory usage (MB):
                dpName: memory_used
                lineType: AREA

          Memory Percentage:
            units: percent
            width: 1000
            miny: 0
            maxy: 100

            graphpoints:
              Memory usage (percentage):
                dpName: memory_used_perc
                lineType: AREA

      ISAMReverseProxy:
        datasources:
          status:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMReverseProxy.RPStatus
            cycletime: 60

            datapoints:
              status:
                rrdtype: GAUGE
                createCmd: 'RRA:AVERAGE:0.5:1:600
                  RRA:AVERAGE:0.5:6:600
                  RRA:AVERAGE:0.5:24:600
                  RRA:AVERAGE:0.5:288:600
                  RRA:MAX:0.5:6:600
                  RRA:MAX:0.5:24:600
                  RRA:MAX:0.5:288:600
                  RRA:LAST:0.5:1:600
                  RRA:LAST:0.5:6:600
                  RRA:LAST:0.5:24:600
                  RRA:LAST:0.5:288:600'

          throughput:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMReverseProxy.RPThroughput
            cycletime: 600

            datapoints:
              requests:
                rrdtype: GAUGE
                createCmd: 'RRA:AVERAGE:0.5:1:600
                  RRA:AVERAGE:0.5:6:600
                  RRA:AVERAGE:0.5:24:600
                  RRA:AVERAGE:0.5:288:600
                  RRA:MAX:0.5:6:600
                  RRA:MAX:0.5:24:600
                  RRA:MAX:0.5:288:600
                  RRA:LAST:0.5:1:600
                  RRA:LAST:0.5:6:600
                  RRA:LAST:0.5:24:600
                  RRA:LAST:0.5:288:600'

        graphs:
          Reverse Proxy Status:
            width: 1000
            miny: 0
            maxy: 2
            comments: [0=Healthy - 1=Warning - 2=Unhealthy]

            graphpoints:
              status:
                dpName: status_status
                cFunc: LAST

          Throughput:
            units: requests/min
            width: 1000
            miny: 0

            graphpoints:
              requests:
                dpName: throughput_requests
                cFunc: LAST

      ISAMJunction:
        datasources:
          status:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMJunction.JStatus
            cycletime: 60

            datapoints:
              status:
                rrdtype: GAUGE
                createCmd: 'RRA:AVERAGE:0.5:1:600
                  RRA:AVERAGE:0.5:6:600
                  RRA:AVERAGE:0.5:24:600
                  RRA:AVERAGE:0.5:288:600
                  RRA:MAX:0.5:6:600
                  RRA:MAX:0.5:24:600
                  RRA:MAX:0.5:288:600
                  RRA:LAST:0.5:1:600
                  RRA:LAST:0.5:6:600
                  RRA:LAST:0.5:24:600
                  RRA:LAST:0.5:288:600'

        graphs:
          Junction Status:
            width: 1000
            miny: 0
            maxy: 2
            comments: [0=Healthy - 1=Warning - 2=Unhealthy]

            graphpoints:
              status:
                dpName: status_status
                cFunc: LAST

      ISAMJunctionServer:
        datasources:
          status:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMJunctionServer.JSStatus
            cycletime: 60

            datapoints:
              status:
                rrdtype: GAUGE
                createCmd: 'RRA:AVERAGE:0.5:1:600
                  RRA:AVERAGE:0.5:6:600
                  RRA:AVERAGE:0.5:24:600
                  RRA:AVERAGE:0.5:288:600
                  RRA:MAX:0.5:6:600
                  RRA:MAX:0.5:24:600
                  RRA:MAX:0.5:288:600
                  RRA:LAST:0.5:1:600
                  RRA:LAST:0.5:6:600
                  RRA:LAST:0.5:24:600
                  RRA:LAST:0.5:288:600'

        graphs:
          Junction Server Status:
            width: 1000
            miny: 0
            maxy: 2
            comments: [0=Healthy - 1=Warning - 2=Unhealthy]

            graphpoints:
              status:
                dpName: status_status
                cFunc: LAST

      ISAMInterface:
        datasources:
          interface:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMInterface.ISAMInterface

            datapoints:
              inbound:
                rrdtype: GAUGE
              outbound:
                rrdtype: GAUGE

        graphs:
          Bandwidth:
            width: 1000
            units: bits/s
            miny: 0

            graphpoints:
              inbound:
                dpName: interface_inbound
              outbound:
                dpName: interface_outbound

      ISAMFileSystem:
        datasources:
          filesystem:
            type: Python
            plugin_classname: ZenPacks.community.ISAM.dsplugins.ISAMFileSystem.ISAMFileSystem

            datapoints:
              size:
                rrdtype: GAUGE
              used:
                rrdtype: GAUGE
              used_perc:
                rrdtype: GAUGE

        thresholds:
          FileSystem Usage Warning:
            dsnames: [filesystem_used_perc]
            eventClass: /Perf/Filesystem
            maxval: '60'
          FileSystem Usage Critical:
            dsnames: [filesystem_used_perc]
            eventClass: /Perf/Filesystem
            severity: 5
            maxval: '95'
          FileSystem Usage Error:
            dsnames: [filesystem_used_perc]
            eventClass: /Perf/Filesystem
            severity: 4
            maxval: '80'

        graphs:
          FileSystem Used:
            width: 1000
            units: bytes
            base: true
            miny: 0

            graphpoints:
              used:
                dpName: filesystem_used
                lineType: AREA

          FileSystem Used Percentage:
            width: 1000
            units: percent
            miny: 0
            maxy: 100

            graphpoints:
              used:
                dpName: filesystem_used_perc
                lineType: AREA

